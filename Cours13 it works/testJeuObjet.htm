<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" lang="fr" xml:lang="fr">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Test objet</title>
    <style>
        p {
            color: black;
            font-family: Arial;
            font-size: 16pt;
            text-align: center;
            width: 640px;
        }
    </style>
    <script type="text/javascript" src="WebGl.js"></script>
    <script type="text/javascript" src="ShaderCouleursTextures.js"></script>
    <script type="text/javascript" src="glMatrix-0.9.5.min.js"></script>
    <script type="text/javascript" src="Transformations.js"></script>
    <script type="text/javascript" src="Camera.js"></script>
    <script type="text/javascript" src="Sol.js"></script>
    <script type="text/javascript" src="Murs.js"></script>
    <script type="text/javascript" src="Creneaux.js"></script>
    <script type="text/javascript" src="Tunnels.js"></script>
    <script type="text/javascript" src="Ciel.js"></script>
    <script type="text/javascript" src="Textures.js"></script>
    <script type="text/javascript" src="Fleche.js"></script>
    <script type="text/javascript" src="Tresor.js"></script>
    <script type="text/javascript">

        let objgl = null;
        let objProgShaders = null;
        let objScene3D = null;
        let tabObjFleche = null;;

        /*Cette section est utilisé pour pouvoir itérer sur les objets 3D avec leur nom et, s'il y
        en a plusieurs, pouvoir utiliser une boucle avec le nombre connu d'objets 3D de ce type
        comme pour les flèches*/
        const OBJ3D_SOL = 0;
        const OBJ3D_MURS = 1;
        const OBJ3D_CIEL = 2;
        const OBJ3D_FLECHE = 3;

        const tabImages = ['Sol.jpg', 'Mur.jpg', 'Ciel.jpg', 'fleche.jpg'];
        const TEX_SOL = 0;
        const TEX_MUR = 1;
        const TEX_CIEL = 2;
        const TEX_FLECHE = 3;

        let isRestrictKeysActive = false;
        let previousCameraPosition = null;
        let previousCameraDirection = null;

        // Le niveau actuel du jeu
        let intNiveau = 0;

        // Le nombre de flèches : 18 - (intNiveau *2)
        let nbFleches = 1;

        function demarrer() {
            const objCanvas = document.getElementById('monCanvas');
            objgl = initWebGL(objCanvas);  // Initialise le contexte WebGL
            objProgShaders = initShaders(objgl);
            // objSons = initSons();
            objScene3D = initScene3D(objgl); // Créer la scène

            effacerCanevas(objgl);
            dessiner(objgl, objProgShaders, objScene3D);
            animer();
        }

        // Un cycle d'animation	
        function animer() {
            // Requête pour le prochain cycle
            objCycleAnimation = requestAnimationFrame(animer);

            // Le cycle d'animation
            effacerCanevas(objgl);
            mettreAjourAnimation();
            dessiner(objgl, objProgShaders, objScene3D);
        }

        // Pour mettre à jour l'animation
        function mettreAjourAnimation() {
            for (let i = 0; i < nbFleches; i++) {
                const obj3DFleche = objScene3D.tabObjets3D[OBJ3D_FLECHE + i];
                tournerFleche(i);
            }
        }

        function tournerFleche(intNoTornade) {
            const obj3DFleche = objScene3D.tabObjets3D[OBJ3D_FLECHE + intNoTornade];
            let fltAngleY = getAngleY(obj3DFleche.transformations) + 0.5;
            if (fltAngleY > 360) fltAngleY -= 360;
            setAngleY(fltAngleY, obj3DFleche.transformations);
        }

        function initScene3D(objgl) {
            document.getElementById('lblNiveau').innerHTML = intNiveau + 1

            const objScene3D = new Object();
            const tabObjets3D = new Array();

            // Mettre les textures dans la scène
            objScene3D.textures = creerTextures(objgl, tabImages);

            // Créer le sol
            const obj3DSol = creerObj3DSol(objgl, TEX_SOL, intNiveau);
            tabObjets3D.push(obj3DSol);

            // Créer les murs
            const obj3DMurs = creerObj3DMurs(objgl, obj3DSol, TEX_MUR, intNiveau);
            tabObjets3D.push(obj3DMurs);

             // Créer les créneaux
/*             const obj3DCreneaux = creerObj3DCreneaux(objgl, obj3DMurs, TEX_MUR);
            tabObjets3D.push(obj3DCreneaux);  */

            // Créer le ciel
            const obj3DCiel = creerObj3DCiel(objgl, obj3DMurs, TEX_CIEL);
            tabObjets3D.push(obj3DCiel);

            //Créer Trésor
            const obj3DTresor = creerObj3DTresor(objgl, [TEX_TRESORGAUCHEDROITE, TEX_TRESORFACE, TEX_TRESORFACEHAUT])
            tabObjets3D.push(obj3DTresor);

            // //Créer Flèche
            for(let i = 0; i < nbFleches; i++){
                const obj3DFleche = creerObj3DFleche(objgl, TEX_FLECHE);
                tabObjets3D.push(obj3DFleche);
                setPositionFleche(0.5, 14, obj3DFleche);
            }

            // Mettre les objets 3D sur la scène
            objScene3D.tabObjets3D = tabObjets3D;

            // La caméra
            const camera = creerCamera();
            setPositionsCameraXYZ([0, 0.5, obj3DMurs.fltProfondeur / 2 - 0.1], camera);
            setCiblesCameraXYZ([0, 0.5, 0], camera);
            setOrientationsXYZ([0, 1, 0], camera);
            objScene3D.camera = camera;

            //Oriente les flèches vers le trésor
            for (let i = 0; i < nbFleches; i++) {
                const obj3DFleche = objScene3D.tabObjets3D[OBJ3D_FLECHE + i];
                trouverCoffre(obj3DFleche, obj3DTresor);
            }
            return objScene3D;
        }

        function dessiner(objgl, objProgShaders, objScene3D) {
            // La vue
            objgl.viewport(0, 0, objgl.drawingBufferWidth, objgl.drawingBufferHeight);

            // Matrice de projection
            const matProjection = mat4.create();
            const fltRapportCanevas = objgl.drawingBufferWidth / objgl.drawingBufferHeight;
            mat4.perspective(45, fltRapportCanevas, 0.01, 100, matProjection);

            // Relier la matrice aux shaders
            objgl.uniformMatrix4fv(objProgShaders.matProjection, false, matProjection);

            for (let i = 0; i < objScene3D.tabObjets3D.length; i++) {
                const vertex = objScene3D.tabObjets3D[i].vertex;
                const couleurs = objScene3D.tabObjets3D[i].couleurs;
                const texels = objScene3D.tabObjets3D[i].texels;
                const maillage = objScene3D.tabObjets3D[i].maillage;
                const transformations = objScene3D.tabObjets3D[i].transformations;

                // Matrice du modèle            
                const matModeleVue = mat4.create();
                mat4.identity(matModeleVue);

                // Placer la caméra sur la scène
                mat4.lookAt(getPositionsCameraXYZ(objScene3D.camera),
                    getCiblesCameraXYZ(objScene3D.camera),
                    getOrientationsXYZ(objScene3D.camera),
                    matModeleVue);

                // Appliquer les transformations sur le modèle 
                mat4.translate(matModeleVue, getPositionsXYZ(transformations));
                mat4.scale(matModeleVue, getEchellesXYZ(transformations));
                mat4.rotateX(matModeleVue, getAngleX(transformations) * Math.PI / 180);
                mat4.rotateZ(matModeleVue, getAngleZ(transformations) * Math.PI / 180);
                //a été déplacé pour faire tourner les flèches sur eux mêmes
                mat4.rotateY(matModeleVue, getAngleY(transformations) * Math.PI / 180);

                // Relier la matrice aux shaders
                objgl.uniformMatrix4fv(objProgShaders.matModeleVue, false, matModeleVue);

                if (maillage == null)
                    // Dessiner les sous-objets
                    for (let j = 0; j < vertex.length; j++) {

                        // Relier les vertex aux shaders
                        objgl.bindBuffer(objgl.ARRAY_BUFFER, vertex[j]);
                        objgl.vertexAttribPointer(objProgShaders.posVertex, 3, objgl.FLOAT, false, 0, 0);
                        const intNbVertex = (objgl.getBufferParameter(objgl.ARRAY_BUFFER, objgl.BUFFER_SIZE) / 4) / 3;

                        // Relier les couleurs aux shaders
                        objgl.bindBuffer(objgl.ARRAY_BUFFER, couleurs[j]);
                        objgl.vertexAttribPointer(objProgShaders.couleurVertex, 4, objgl.FLOAT, false, 0, 0);

                        // Activer la texture
                        objgl.activeTexture(objgl.TEXTURE0 + texels[j].intNoTexture);
                        objgl.bindTexture(objgl.TEXTURE_2D, objScene3D.textures[texels[j].intNoTexture]);

                        // Relier les texels aux shaders
                        objgl.bindBuffer(objgl.ARRAY_BUFFER, texels[j]);
                        objgl.vertexAttribPointer(objProgShaders.posTexel, 2, objgl.FLOAT, false, 0, 0);

                        // Relier le no de texture et le taux de couleur aux shaders                 
                        objgl.uniform1i(objProgShaders.noTexture, texels[j].intNoTexture);
                        objgl.uniform1f(objProgShaders.pcCouleurTexel, texels[j].pcCouleurTexel);

                        // Dessiner le ciel ou pas en se basant sur binVisible dans Ciel.js
                        if (i != OBJ3D_CIEL || objScene3D.tabObjets3D[i].binVisible == true) {
                            // Dessiner
                            objgl.drawArrays(vertex[j].typeDessin, 0, intNbVertex);
                        }
                    }
                else { // Dessiner le maillage

                    // Relier les vertex aux shaders
                    objgl.bindBuffer(objgl.ARRAY_BUFFER, vertex);
                    objgl.vertexAttribPointer(objProgShaders.posVertex, 3, objgl.FLOAT, false, 0, 0);

                    // Relier les couleurs aux shaders
                    objgl.bindBuffer(objgl.ARRAY_BUFFER, couleurs);
                    objgl.vertexAttribPointer(objProgShaders.couleurVertex, 4, objgl.FLOAT, false, 0, 0)

                    // Activer la texture
                    objgl.activeTexture(objgl.TEXTURE0 + texels.intNoTexture);
                    objgl.bindTexture(objgl.TEXTURE_2D, objScene3D.textures[texels.intNoTexture]);

                    // Relier les texels aux shaders
                    objgl.bindBuffer(objgl.ARRAY_BUFFER, texels);
                    objgl.vertexAttribPointer(objProgShaders.posTexel, 2, objgl.FLOAT, false, 0, 0);

                    // Relier le no de texture et le taux de couleur aux shaders                 
                    objgl.uniform1i(objProgShaders.noTexture, texels.intNoTexture);
                    objgl.uniform1f(objProgShaders.pcCouleurTexel, texels.pcCouleurTexel);

                    // Sélectionner le maillage qu'on va utiliser pour les triangles et les droites
                    objgl.bindBuffer(objgl.ELEMENT_ARRAY_BUFFER, maillage);

                    // Dessiner le ciel ou pas en se basant sur binVisible dans Ciel.js
                    if (i != OBJ3D_CIEL || objScene3D.tabObjets3D[i].binVisible == true) {
                        // Dessiner les triangles
                        objgl.drawElements(objgl.TRIANGLES, maillage.intNbTriangles * 3, objgl.UNSIGNED_SHORT, 0);
                        // Dessiner les droites à la suite des triangles
                        objgl.drawElements(objgl.LINES, maillage.intNbDroites * 2, objgl.UNSIGNED_SHORT, maillage.intNbTriangles * 2 * 3);
                    }
                }
            }
        }

        function effacerCanevas(objgl) {
            // Met la couleur d'effacement au noir et complétement opaque
            objgl.clearColor(0.0, 0.0, 0.0, 1.0);
            // Efface les couleurs et le buffer de profondeur.
            objgl.clear(objgl.COLOR_BUFFER_BIT | objgl.DEPTH_BUFFER_BIT);
        }

        /*  function initSons() {
             const objSons = new Object();
 
             // Ce son joue tout au long du jeu
             let objSon = document.createElement('audio');
             objSon.setAttribute('src', 'SonVent.mp3');
             objSon.load();
             objSon.loop = true;
             objSons.sonVent = objSon;
 
             // Ce son joue lorsque le joueur passe au prochain niveau
             objSon = document.createElement('audio');
             objSon.setAttribute('src', 'SonNextLevel.mp3');
             objSon.load();
             objSon.loop = true;
             objSons.sonNextLevel = objSon;
 
             // Ce son joue lorsque le joueur est dans la tornade
             objSon = document.createElement('audio');
             objSon.setAttribute('src', 'SonTornade.mp3');
             objSon.load();
             objSon.loop = true;
             objSons.sonTornade = objSon;
 
             return objSons;
         }
  */
        //NOTE: Si le joueur appui sur PageUp, puis PageDown, et ensuite bouge,
        //il se reteleportera à l'endroit sauver s'il rappui sur PageDown
        function restrictKeys(event) {
            // Key codes: CTRL = 17, SHIFT = 16, SPACE = 32
            var allowedKeys = [17, 16, 32];

            if (event.keyCode === 34) { // PageDown
                // Restaurer le contrôle des touches
                document.removeEventListener('keydown', restrictKeys);
                isRestrictKeysActive = false;
            }
        }

        //Permet de faire tourner les objets
        //Pour changer l'objet à tourner, changer OBJ3D_TRESOR ↓↓↓ pour l'objet désiré
        function tournerObjet() {
            const transformations = objScene3D.tabObjets3D[OBJ3D_TRESOR].transformations;

            if (event.keyCode == 100 || event.keyCode == 102) {
                // 100:  Flèche-à-gauche NumPad; 102:Flèche-à-droite NumPad
                const intDirection = (event.keyCode == 102) ? -1 : 1;
                setAngleY(getAngleY(transformations) + 2 * intDirection, transformations);


            }
            else if (event.keyCode == 104 || event.keyCode == 98) {
                // 104:  Flèche-en-haut NumPad; 98:Flèche-en-bas NumPad
                const intDirection = (event.keyCode == 98) ? 1 : -1;
                setAngleX(getAngleX(transformations) + 2 * intDirection, transformations);
            }

            effacerCanevas(objgl);
            dessiner(objgl, objProgShaders, objScene3D);
        }

        function deplacerCamera() {
            const camera = objScene3D.camera;
            tournerObjet();
            let fltX;
            let fltZ;
            let intDirection;
            let fltXPrime;
            let fltZPrime;
            let binAucuneCollision;
            let fltLimiteOuest2;
            let fltLimiteEst2;
            let fltLimiteNord2;
            let fltLimiteSud2;

            if (!isRestrictKeysActive && event.keyCode == 33) { // PageUp
                // Sauvegarder la position courante de la caméra
                previousCameraPosition = {
                    x: getPositionCameraX(camera),
                    y: getPositionCameraY(camera),
                    z: getPositionCameraZ(camera)
                };
                previousCameraDirection = {
                    x: getCibleCameraX(camera),
                    y: getCibleCameraY(camera),
                    z: getCibleCameraZ(camera)
                };

                // Bouger la caméra au millieu en haut
                setPositionCameraX(0, camera);
                setPositionCameraY(40, camera);
                setPositionCameraZ(0, camera);
                setCibleCameraX(0.001, camera);
                setCibleCameraY(0, camera); //La caméra regarde le bas
                setCibleCameraZ(0, camera);
                objScene3D.tabObjets3D[OBJ3D_CIEL].binVisible = false; //Cacher le ciel

                //Restreindre le mouvement
                document.addEventListener('keydown', restrictKeys);
                isRestrictKeysActive = true;
            } else if (isRestrictKeysActive && event.keyCode == 34) { // PageDown
                // Restaurer la position de la caméra
                if (previousCameraPosition && previousCameraDirection) {
                    setPositionCameraX(previousCameraPosition.x, camera);
                    setPositionCameraY(previousCameraPosition.y, camera);
                    setPositionCameraZ(previousCameraPosition.z, camera);
                    setCibleCameraX(previousCameraDirection.x, camera);
                    setCibleCameraY(previousCameraDirection.y, camera);
                    setCibleCameraZ(previousCameraDirection.z, camera);
                    objScene3D.tabObjets3D[OBJ3D_CIEL].binVisible = true; //Afficher le ciel
                }
            }
            if (!isRestrictKeysActive && (event.keyCode == 37 || event.keyCode == 39)) {
                // 37:  Flèche-à-gauche; 39:Flèche-à-droite
                fltX = getCibleCameraX(camera) - getPositionCameraX(camera);
                fltZ = getCibleCameraZ(camera) - getPositionCameraZ(camera);
                intDirection = (event.keyCode == 37) ? -1 : 1;
                const fltAngle = intDirection * Math.PI / 90; // Tourner 2 degrés
                fltXPrime = fltX * Math.cos(fltAngle) - fltZ * Math.sin(fltAngle);
                fltZPrime = fltX * Math.sin(fltAngle) + fltZ * Math.cos(fltAngle);
                setCibleCameraX(getPositionCameraX(camera) + fltXPrime, camera);
                setCibleCameraZ(getPositionCameraZ(camera) + fltZPrime, camera);
            }
            else
                if (!isRestrictKeysActive && (event.keyCode == 38 || event.keyCode == 40)) {
                    // 38:  Flèche-en-haut; 40:Flèche-en-bas
                    fltX = getCibleCameraX(camera) - getPositionCameraX(camera);
                    fltZ = getCibleCameraZ(camera) - getPositionCameraZ(camera);
                    const fltRayon = Math.sqrt(fltX * fltX + fltZ * fltZ);
                    intDirection = (event.keyCode == 38) ? 1 : -1;

                    fltXPrime = intDirection * 0.2 * Math.cos(Math.acos(fltX / fltRayon));
                    fltZPrime = intDirection * 0.2 * Math.sin(Math.asin(fltZ / fltRayon));

                    // Positions de la caméra
                    let fltXCamera = getPositionX(camera) + fltXPrime;
                    let fltZCamera = getPositionZ(camera) + fltZPrime;

                    // Limites du mur
                    const fltLimiteOuest = -objScene3D.tabObjets3D[OBJ3D_MURS].fltLargeur / 2 + 0.1;
                    const fltLimiteEst = objScene3D.tabObjets3D[OBJ3D_MURS].fltLargeur / 2 - 0.1;
                    const fltLimiteNord = -objScene3D.tabObjets3D[OBJ3D_MURS].fltProfondeur / 2 + 0.1;
                    const fltLimiteSud = objScene3D.tabObjets3D[OBJ3D_MURS].fltProfondeur / 2 - 0.1;

                    binAucuneCollision = (fltXCamera > fltLimiteOuest) && (fltXCamera < fltLimiteEst) &&
                        (fltZCamera > fltLimiteNord) && (fltZCamera < fltLimiteSud);
                    let binFondTunnel = false;

                    if (binAucuneCollision) { // Déplacer la caméra
                        setCibleCameraX(getCibleCameraX(camera) + fltXPrime, camera);
                        setCibleCameraZ(getCibleCameraZ(camera) + fltZPrime, camera);
                        setPositionCameraX(getPositionCameraX(camera) + fltXPrime, camera);
                        setPositionCameraZ(getPositionCameraZ(camera) + fltZPrime, camera);
                    }
                    else { // Pour longer les murs s'il y a une collision
                        if (fltXCamera <= fltLimiteOuest || fltXCamera >= fltLimiteEst) {
                            // On longe le mur ouest ou est 
                            fltZPrime = 0.2 * ((fltZ < 0) ? -1 : 1); fltXPrime = 0.0;
                        }
                        else { // On longe le mur sud ou nord
                            fltXPrime = 0.2 * ((fltX < 0) ? -1 : 1); fltZPrime = 0.0;
                        }

                        // Nouvelles positions de la caméra
                        fltXCamera = getPositionX(camera) + fltXPrime;
                        fltZCamera = getPositionZ(camera) + fltZPrime;
                        binAucuneCollision = (fltXCamera > fltLimiteOuest) && (fltXCamera < fltLimiteEst) &&
                            (fltZCamera > fltLimiteNord) && (fltZCamera < fltLimiteSud);
                        // Longer le mur s'il ne rencontre pas un nouveau mur
                        if (binAucuneCollision) {
                            setCibleCameraX(getCibleCameraX(camera) + fltXPrime, camera);
                            setCibleCameraZ(getCibleCameraZ(camera) + fltZPrime, camera);
                            setPositionCameraX(getPositionCameraX(camera) + fltXPrime, camera);
                            setPositionCameraZ(getPositionCameraZ(camera) + fltZPrime, camera);
                        }
                    }
                }
        }



    </script>
</head>

<body onload="demarrer()">
    <p> Tornade Niveau: <span id="lblNiveau">1</span></p>
    <canvas id="monCanvas" width="640" height="640" tabIndex="1" onkeydown="deplacerCamera(); return false">
        Votre navigateur ne supporte pas la balise canvas
    </canvas>
</body>

</html>